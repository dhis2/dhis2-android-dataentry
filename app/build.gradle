apply plugin: "com.android.application"
apply plugin: "me.tatarka.retrolambda"
apply plugin: "org.sonarqube"
apply plugin: "io.fabric"
apply plugin: "spoon"
apply from: rootProject.file("plugins/android-checkstyle.gradle")
apply from: rootProject.file("plugins/android-errorprone.gradle")
apply from: rootProject.file("plugins/android-paperwork.gradle")
apply from: rootProject.file("plugins/android-dexcount.gradle")
apply from: rootProject.file("plugins/android-pmd.gradle")

// This has been disabled because of issues with multi-dex
// apply from: rootProject.file("plugins/android-findbugs.gradle")

def versions = rootProject.ext.versions
def libraries = rootProject.ext.libraries

repositories {
    // required by crashlytics
    maven {
        url("https://maven.fabric.io/public")
    }

    // used by sdk
    maven {
        url("https://oss.sonatype.org/content/repositories/snapshots")
    }
}

def getFabricKey = {
    def fabricPropertiesFile = file("fabric.properties")

    // retrieve api key from file, otherwise look for a key in environment
    if (fabricPropertiesFile.exists()) {
        Properties properties = new Properties()
        properties.load(fabricPropertiesFile.newDataInputStream())
        return properties.getProperty("apiKey")
    } else if (System.getenv("DHIS_FABRIC_KEY") != null) {
        return System.getenv("DHIS_FABRIC_KEY")
    } else {
        // in case that, neither the environment variable or the properties file is not specified,
        // return an empty string which will allow to a build debug type of the application.
        return ""
    }
}

def versionMajor = 0
def versionMinor = 1
def versionPatch = 2
def versionBuild = 0

android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.tools

    defaultConfig {
        applicationId "org.hisp.dhis.android.dataentry"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.sdk
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        multiDexEnabled true

        // jUnit test runner for android
        testInstrumentationRunner "org.hisp.dhis.android.dataentry.DhisInstrumentationTestsRunner"

        // Fabric API key
        manifestPlaceholders = [
                fabricKey: getFabricKey()
        ]

        // Make generated apks contain version name and code.
        archivesBaseName = "app-${versionName}-${versionCode}"
    }

    lintOptions {
        // fail early
        abortOnError true

        // App does not have deep linking.
        disable "GoogleAppIndexingWarning"

        // Okio references java.nio that does not presented in Android SDK.
        warning "InvalidPackage"

        // casting 'InvalidPackage' error to warning
        warning 'InvalidPackage'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        debug {
            storeFile file("dataentry.jks")
            storePassword "android"
            keyAlias "android"
            keyPassword "android"
        }
    }

    // ToDo: Handle dependency on jackson in d2 properly (possibly replace with GSON)
    packagingOptions {
        // excluding duplicate license files
        // from jackson modules
        exclude "META-INF/LICENSE"

        // excluding duplicate rxjava properties file
        // see https://github.com/ReactiveX/RxJava/issues/4445#issuecomment-243591879
        exclude 'META-INF/rxjava.properties'
    }

    buildTypes {
        debug {
            // custom application suffix which allows to
            // install debug and release builds at the same time
            applicationIdSuffix = ".debug"

            // jacoco test coverage reports both for
            // androidTest and test source sets
            testCoverageEnabled = false

            // Disable fabric build ID generation for debug builds
            ext.enableCrashlytics = false

            // Using dataentry.jks to sign debug build type.
            signingConfig = signingConfigs.debug
        }
        alpha {
            // custom application suffix which allows to
            // install debug and release builds at the same time
            applicationIdSuffix = ".alpha"

            // Disable fabric build ID generation for debug builds
            ext.enableCrashlytics = false

            // Using dataentry.jks to sign debug build type.
            signingConfig = signingConfigs.debug
        }
        release {
            // enabling crashlytics for debug builds
            ext.enableCrashlytics = true
        }
    }

    productFlavors {
        mHealth4Africa {
            applicationId "org.hisp.dhis.android.dataentry.mHeakth4Africa"
        }

        main {

        }
    }

    sourceSets {
        androidTest {
            assets.srcDirs = ['src/androidTest/assets/']
        }
    }
}

spoon {
    // for debug output
    debug = true
}

dependencies {
    compile "hu.supercluster:paperwork:${libraries.paperwork}"

    // Support libraries
    compile "com.android.support:appcompat-v7:${libraries.support}"
    compile "com.android.support:support-annotations:${libraries.support}"
    compile "com.android.support:cardview-v7:${libraries.support}"
    compile "com.android.support:design:${libraries.support}"
    compile "com.android.support:multidex:${libraries.multidex}"

    // Other
    compile "com.github.castorflex.smoothprogressbar:library-circular:${libraries.progressbar}"
    provided "com.google.code.findbugs:annotations:${libraries.findbugs}"

    // Explicitly compiling JSR305 in order to resolve
    // dependency conflict between .apk and test .apk
    // compile "com.google.code.findbugs:jsr305:${libraries.jsr305}"

    // Core module of the DHIS 2 Android SDK
    compile "org.hisp.dhis:android-core:${libraries.dhis2sdk}"

    // RuleEngine module of the DHIS 2 Android SDK
    compile ("org.hisp.dhis:core-rules:${libraries.dhis2sdk}") {
        exclude group: "com.google.code.findbugs", module: "jsr305"
    }
    compile ("org.hisp.dhis:android-rules:${libraries.dhis2sdk}") {
        exclude group: "com.google.code.findbugs", module: "jsr305"
    }

    // Fabric tools
    compile("com.crashlytics.sdk.android:crashlytics:${libraries.crashlytics}@aar") {
        transitive = true;
    }

    // ReactiveX
    compile "io.reactivex.rxjava2:rxandroid:${libraries.rxandroid}"
    compile "io.reactivex.rxjava2:rxjava:${libraries.rxjava}"
    compile "com.github.akarnokd:rxjava2-interop:${libraries.rxjavainteroperop}"

    // Google dagger
    compile "com.google.dagger:dagger:${libraries.dagger}"
    annotationProcessor "com.google.dagger:dagger-compiler:${libraries.dagger}"

    // Google's auto-value. Annotations are used only during compilation time, as well as
    // annotation processor which hoops up into compilation process
    provided "com.google.auto.value:auto-value:${libraries.autovalue}"
    annotationProcessor "com.google.auto.value:auto-value:${libraries.autovalue}"

    // Extension which generates mappers for work with cursors
    annotationProcessor "com.gabrielittner.auto.value:auto-value-cursor:${libraries.autovaluecursor}"
    annotationProcessor "com.ryanharter.auto.value:auto-value-parcel:${libraries.autovalueparcel}"

    // Square libraries
    debugCompile "com.squareup.leakcanary:leakcanary-android:${libraries.leakcanary}"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:${libraries.leakcanary}"
    alphaCompile "com.squareup.leakcanary:leakcanary-android-no-op:${libraries.leakcanary}"
    compile "com.squareup.sqlbrite:sqlbrite:${libraries.sqlbrite}"

    // Jake Wharton libraries
    compile "com.jakewharton.timber:timber:${libraries.timber}"
    compile "com.jakewharton:butterknife:${libraries.butterknife}"
    annotationProcessor "com.jakewharton:butterknife-compiler:${libraries.butterknife}"

    compile "com.jakewharton.rxbinding2:rxbinding:${libraries.rxbindings}"
    compile "com.jakewharton.rxbinding2:rxbinding-appcompat-v7:${libraries.rxbindings}"

    // Test dependencies
    testCompile "junit:junit:${libraries.junit}"
    testCompile "org.assertj:assertj-core:${libraries.assertj}"
    testCompile "org.mockito:mockito-core:${libraries.mockito}"
    testCompile "org.powermock:powermock-module-junit4:${libraries.powermock}"
    testCompile "org.powermock:powermock-api-mockito2:${libraries.powermock}"
    testCompile "com.squareup.leakcanary:leakcanary-android-no-op:${libraries.leakcanary}"
    testCompile "nl.jqno.equalsverifier:equalsverifier:${libraries.equalsverifier}"

    // Spoon client which allows to capture screenshots during instrumentation tests
    androidTestCompile "com.squareup.spoon:spoon-client:${libraries.spoon}"
    androidTestCompile "com.squareup.okhttp3:mockwebserver:${libraries.okhttp}"
    androidTestCompile "org.mockito:mockito-android:${libraries.mockito}"
    androidTestCompile "org.assertj:assertj-core:${libraries.assertj}"

    androidTestCompile("com.android.support.test.espresso:espresso-idling-resource:${libraries.espresso}") {
        exclude module: "support-annotations"
        exclude group: "com.google.code.findbugs", module: "jsr305"
    }
    androidTestCompile("com.android.support.test.espresso:espresso-core:${libraries.espresso}") {
        exclude module: "support-annotations"
        exclude group: "com.google.code.findbugs", module: "jsr305"
    }
    androidTestCompile("com.android.support.test.espresso:espresso-intents:${libraries.espresso}") {
        exclude module: "support-annotations"
        exclude group: "com.google.code.findbugs", module: "jsr305"
    }
    androidTestCompile("com.android.support.test.espresso:espresso-contrib:${libraries.espresso}") {
        // Causes IncompatibleClassChangeError
        exclude group: "com.google.code.findbugs", module: "jsr305"
        exclude module: "support-annotations"
        exclude module: "recyclerview-v7"
        exclude module: "appcompat-v7"
        exclude module: "support-v4"
        exclude module: "design"
    }
}
